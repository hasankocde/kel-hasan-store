import React, { useState, useEffect } from "react";
import { useDispatch } from "react-redux";
import useKellerCall from "../../hooks/useKellerCall";
import ProfileContainer2 from './ProfileContainer2';

const ProfileContainer = () => {
  const { postKellerData, putKellerData, getKellerData } = useKellerCall();
  const dispatch = useDispatch();

  const [address, setAddress] = useState({
    street: "",
    zipCode: "",
    homeNumber: "",
    city: "",
    country: "",
    doorbellName: "",
  });
  const [isUpdateMode, setIsUpdateMode] = useState(false);
  const [addressId, setAddressId] = useState(null);
  const [buttonLabel, setButtonLabel] = useState("Addresse speichern");
  const [isEditable, setIsEditable] = useState(true);

  useEffect(() => {
    const fetchAddress = async () => {
      try {
        const result = await getKellerData("addresses");
        console.log("Fetch result:", result); // Log the entire result
        if (result && result.data && result.data.length > 0) {
          console.log("Address data:", result.data[0]); // Log the address data
          setAddress(result.data[0]);
          setAddressId(result.data[0]._id);
          setIsUpdateMode(true);
          setButtonLabel("Adresse aktualisieren");
          setIsEditable(false); // Initially disable the fields
        } else {
          console.log("No address found.");
        }
      } catch (error) {
        console.error("Error fetching address:", error);
      }
    };
    fetchAddress();
  }, []); // Empty dependency array to run only once on mount

  const handleChange = (e) => {
    setAddress({ ...address, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (isUpdateMode && addressId) {
        await putKellerData(`addresses`, { _id: addressId, ...address });
        setButtonLabel("Adresse aktualisieren");
        setIsEditable(false);
      } else {
        const createdAddress = await postKellerData("addresses", address);
        if (createdAddress && createdAddress.data) {
          console.log("Created address data:", createdAddress.data); // Log created address data
          setAddressId(createdAddress.data._id);
          setIsUpdateMode(true);
          setButtonLabel("Adresse aktualisieren");
          setIsEditable(false);
        }
      }
    } catch (error) {
      console.error("Error saving address:", error);
    }
  };
  
  
  const handleEditClick = () => {
    if (isUpdateMode) {
      setIsEditable(true);
      setButtonLabel("Jetzt aktualisieren");
    }
  };
  
  

  return (
    <div className="border w-full m-10 bg-light-grey pb-7 rounded-lg">
      <h1 className="text-4xl font-bold ps-5 pt-5">Profile</h1>
      <div className="flex justify-between items-start pt-3 pb-3">
        <div className="w-1/2 pr-1">
          <div className="bg-white mx-7 my-2 rounded-lg border-2 mb-10">
          <div>
            
            <ProfileContainer2 />
        </div>
          </div>
        </div>
        <div className="w-1/2 pl-1" style={{ paddingRight: '10mm' }}>
          <div className="bg-white mx-7 my-2 rounded-lg border-2 mb-10">
            <div className="px-16 pt-3">
              <h1 className="text-xl border-b-2 border-button-blue text-button-blue uppercase">
                ADRESSE
              </h1>
              <form onSubmit={handleSubmit}>
                <div className="my-5">
                  <label>
                    Street:
                    <input
                      type="text"
                      name="street"
                      value={address.street}
                      onChange={handleChange}
                      className="ml-2 border rounded px-2 py-1 w-full"
                      disabled={!isEditable}
                    />
                  </label>
                </div>
                <div className="my-5">
                  <label>
                    Home Number:
                    <input
                      type="number"
                      name="homeNumber"
                      value={address.homeNumber}
                      onChange={handleChange}
                      className="ml-2 border rounded px-2 py-1 w-full"
                      disabled={!isEditable}
                    />
                  </label>
                </div>
                <div className="my-5">
                  <label>
                    Zip Code:
                    <input
                      type="number"
                      name="zipCode"
                      value={address.zipCode}
                      onChange={handleChange}
                      className="ml-2 border rounded px-2 py-1 w-full"
                      disabled={!isEditable}
                    />
                  </label>
                </div>
                <div className="my-5">
                  <label>
                    City:
                    <input
                      type="text"
                      name="city"
                      value={address.city}
                      onChange={handleChange}
                      className="ml-2 border rounded px-2 py-1 w-full"
                      disabled={!isEditable}
                    />
                  </label>
                </div>
                <div className="my-5">
                  <label>
                    Country:
                    <input
                      type="text"
                      name="country"
                      value={address.country}
                      onChange={handleChange}
                      className="ml-2 border rounded px-2 py-1 w-full"
                      disabled={!isEditable}
                    />
                  </label>
                </div>
                <div className="my-5">
                  <label>
                    Doorbell Name:
                    <input
                      type="text"
                      name="doorbellName"
                      value={address.doorbellName}
                      onChange={handleChange}
                      className="ml-2 border rounded px-2 py-1 w-full"
                      disabled={!isEditable}
                    />
                  </label>
                </div>
                <div className="my-5">
                  {!isUpdateMode ? (
                    <button
                      type="submit"
                      className="bg-button-blue text-white py-2 px-4 rounded w-full"
                    >
                      Addresse speichern
                    </button>
                  ) : (
                    !isEditable && (
                      <button
                        type="button"
                        className="bg-button-blue text-white py-2 px-4 rounded w-full"
                        onClick={handleEditClick}
                      >
                        {buttonLabel}
                      </button>
                    )
                  )}
                </div>
                {isUpdateMode && isEditable && (
                  <div className="my-5">
                    <button
                      type="submit"
                      className="bg-button-blue text-white py-2 px-4 rounded w-full"
                    >
                      Jetzt aktualisieren
                    </button>
                  </div>
                )}
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
  
  
};

export default ProfileContainer;
